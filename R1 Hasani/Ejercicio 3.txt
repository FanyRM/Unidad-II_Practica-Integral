//De acuerdo a los siguientes Objetos:
import 'dart:async';

//Clase tienda {Tienda(ubicacion,nombre,horario).}
class Tienda {
  String ubicacion;
  String nombre_tienda;
  String horario;

  Tienda(this.ubicacion, this.nombre_tienda, this.horario);

  Map<String, dynamic> toMap() {
    return {
      'ubicacion': ubicacion,
      'nombre_tienda': nombre_tienda,
      'horario': horario,
    };
  }
}

//Producto(Nombre,cantidad,precio,existencia),
class Producto extends Tienda {
  String nombre;
  int cantidad;
  double precio;
  int existencia;

  Producto(this.nombre, this.cantidad, this.precio, this.existencia,
      String ubicacion, String nombre_tienda, String horario)
      : super(ubicacion, nombre_tienda, horario);

  @override
  Map<String, dynamic> toMap() {
    final map = super.toMap();
    map.addAll({
      'nombre': nombre,
      'cantidad': cantidad,
      'precio': precio,
      'existencia': existencia,
    });
    return map;
  }
}

//Pedido(nombre_producto,tiempo_entrega, cantidad, costoTotal),
class Pedido extends Producto {
  String nombre_producto;
  String tiempo_entrega;
  int cantidad_pedido;
  double costoTotal;

  Pedido(
      this.nombre_producto,
      this.tiempo_entrega,
      this.cantidad_pedido,
      this.costoTotal,
      String nombre,
      int cantidad,
      double precio,
      int existencia,
      String ubicacion,
      String nombre_tienda,
      String horario)
      : super(nombre, cantidad, precio, existencia, ubicacion, nombre_tienda,
            horario);
  @override
  Map<String, dynamic> toMap() {
    final map = super.toMap();
    map.addAll({
      'nombre_producto': nombre_producto,
      'tiempo_entrega': tiempo_entrega,
      'cantidad_pedido': cantidad_pedido,
      'costoTotal': costoTotal,
    });
    return map;
  }
}

//El futuire para listar con el mapeo
Future<void> listaPedidos(List<Map<String, dynamic>> pedidos) async {
  await Future.delayed(Duration(seconds: 1)); //Para esperar datos, el await indica una espera, se parece un monton a type porque es como una espera de una promesa, solo lo simula
  for(var pedido in pedidos) {
    print(pedido);
  }
}

//El filtrito por producto
Stream<Map<String, dynamic>> buscarProducto(List<Pedido> pedidos, String producto) async* {
  for (var pedido in pedidos) {
    if (pedido.nombre_producto == producto) {
      yield pedido.toMap();
    }
  }
}

//Para buscar por tienda
Stream<Map<String, dynamic>> buscarTienda(List<Pedido> pedidos, String tienda) async* {
  for (var pedido in pedidos) {
    if (pedido.nombre_tienda == tienda) {
      yield pedido.toMap();
    }
  }
}

//Nota> async*: Indica que la función es asincrónica y utilizará el operador yield para devolver valores intermedios.
//yield emite un valor cada vez que es invocado y luego la función continúa ejecutándose desde donde se quedó la próxima vez que se solicite un valor.

//Metodo para calcuar el costo
double calcularCosto(List<Pedido> pedidos) {
  return pedidos.fold(0, (total, pedido) => total + pedido.costoTotal);
}

//Metood para contar la cantidad de productos
int contarProductos(List<Pedido> pedidos) {
  return pedidos.fold(0, (total, pedido) => total + pedido.cantidad_pedido);
}

//es un entero porque debe ser un entero, es lo que regresa
//Notas por si no paso:
//que hace fold?
//fold es una función que se usa para reducir una colección (como una lista) a un solo valor mediante una operación acumulativa.

void main() async {
  //Ejercicio 3-realizar un ejemplo con dart,aplicando métodos de filtrado de datos maps con stream, los filtros deben de ser, búsqueda por producto, búsqueda por tienda, calcular el costo total de un pedido y numero de productos, listar al menos 25 objetos.

  List<Pedido> list = [
    Pedido("Laptop", "3 días", 5, 62500.0, "Asus Pro", 5, 12500.0, 10,
        "Almacén Central", "Electrónica Artic", "9 AM - 7 PM"),
    Pedido("Laptop", "7 días", 6, 63000.0, "Lenovo NIXU", 6, 10500.0, 10,
        "Almacén Central", "Guayabo Gamer", "9 AM - 7 PM"),
    Pedido("Consola de videojuegos", "7 días", 3, 1500.0, "PlayStation 5", 3,
        500.0, 5, "Sucursal Norte", "Gamer Zone", "10 AM - 9 PM"),
    Pedido("Impresora", "3 días", 4, 800.0, "HP LaserJet", 4, 200.0, 30,
        "Sucursal Oeste", "Guayabo Gamer", "9 AM - 5 PM"),
    Pedido("Laptop", "16 días", 10, 125000.0, "Asus Gamer", 10, 12500.0, 18,
        "Almacén Central", "El rincon del friki", "9 AM - 7 PM"),
    Pedido("Cámara", "4 días", 7, 2800.0, "Canon EOS", 7, 400.0, 20,
        "Sucursal Este", "Gamer Zone", "9 AM - 7 PM"),
    Pedido("Consola de videojuegos", "7 días", 3, 22500.0, "XBOX", 3, 7500.0, 5,
        "Sucursal Norte", "El rincon del friki", "10 AM - 9 PM"),
    Pedido("Tablet", "2 días", 6, 1800.0, "iPad Air", 6, 300.0, 25,
        "Almacén Principal", "Gamer Zone", "9 AM - 8 PM"),
    Pedido("Laptop", "6 días", 10, 145000.0, "HP Elite", 10, 14500.0, 18,
        "Almacén Central", "Guayabo Games", "9 AM - 7 PM"),
    Pedido("Auriculares", "1 día", 20, 1000.0, "Sony WH-1000XM4", 20, 50.0, 100,
        "Sucursal Sur", "Guayabo Games", "8 AM - 5 PM"),
    
  Pedido("Monitor", "4 días", 8, 3200.0, "Samsung 27\"", 8, 400.0, 15,
      "Sucursal Norte", "Electrónica Artic", "9 AM - 7 PM"),
  Pedido("Smartphone", "2 días", 12, 96000.0, "iPhone 13 Pro", 12, 8000.0, 12,
      "Sucursal Sur", "Guayabo Gamer", "9 AM - 7 PM"),
  Pedido("Teclado", "3 días", 15, 2250.0, "Logitech G213", 15, 150.0, 50,
      "Sucursal Oeste", "Gamer Zone", "9 AM - 5 PM"),
  Pedido("Mouse", "1 día", 18, 1800.0, "Razer DeathAdder", 18, 100.0, 75,
      "Almacén Central", "El rincon del friki", "9 AM - 7 PM"),
  Pedido("Tablet", "5 días", 7, 2100.0, "Samsung Galaxy Tab S7", 7, 300.0, 20,
      "Almacén Principal", "Electrónica Artic", "9 AM - 8 PM"),
  Pedido("Cámara", "3 días", 5, 3500.0, "Nikon D3500", 5, 700.0, 10,
      "Sucursal Este", "Guayabo Games", "9 AM - 7 PM"),
  Pedido("Consola de videojuegos", "7 días", 4, 20000.0, "Nintendo Switch", 4, 5000.0, 5,
      "Sucursal Norte", "Gamer Zone", "10 AM - 9 PM"),
  Pedido("Auriculares", "2 días", 10, 1500.0, "Bose QuietComfort 35", 10, 150.0, 50,
      "Sucursal Sur", "Electrónica Artic", "8 AM - 5 PM"),
  Pedido("Laptop", "3 días", 9, 108000.0, "Dell XPS 13", 9, 12000.0, 18,
      "Almacén Central", "Guayabo Gamer", "9 AM - 7 PM"),
  Pedido("Impresora", "4 días", 6, 1200.0, "Canon PIXMA", 6, 200.0, 30,
      "Sucursal Oeste", "El rincon del friki", "9 AM - 5 PM"),
    Pedido("Router", "2 días", 12, 7200.0, "Netgear Nighthawk", 12, 600.0, 25,
      "Sucursal Norte", "Electrónica Artic", "9 AM - 7 PM"),
  Pedido("Televisor", "6 días", 4, 40000.0, "Samsung QLED", 4, 10000.0, 10,
      "Almacén Central", "Guayabo Gamer", "9 AM - 7 PM"),
  Pedido("Proyector", "5 días", 3, 6000.0, "Epson Home Cinema", 3, 2000.0, 15,
      "Sucursal Este", "Gamer Zone", "9 AM - 7 PM"),
  Pedido("Smartwatch", "1 día", 8, 3200.0, "Apple Watch Series 6", 8, 400.0, 30,
      "Almacén Principal", "El rincon del friki", "9 AM - 8 PM"),
  Pedido("Bocinas", "3 días", 10, 5000.0, "Bose SoundLink", 10, 500.0, 20,
      "Sucursal Sur", "Guayabo Games", "8 AM - 5 PM")
  ];
  
  //Listar en mapa la lista anterior
  List<Map<String, dynamic>> listaMapas = list.map((p) => p.toMap()).toList();
  
  //Lo de abajo imprime todos los pedidos, y eso no es lo que queremos
  //listaPedidos(listaMapas);
  
  //Filtros ==============================
  
  String productoFiltro = "Laptop";
  String tiendaFiltro = "Guayabo Games";
  
  //Busqueda por producto
  print("\nPedidos con el producto $productoFiltro :");
  await for (var pedido in buscarProducto(list, productoFiltro)) {
    print(pedido);
  }
  
  //Buscar por tienda
  print("\nPedidos en la tienda $tiendaFiltro:");
  await for (var pedido in buscarTienda(list, tiendaFiltro)) {
    print(pedido);
  }
  
  //Contar total de los costos de pedidos
  double totalCosto = calcularCosto(list);
  print("\nCosto total de todos los pedidos: \$${totalCosto}");
  
  //contar el total de productos pedidos
  int totalProductos = contarProductos(list);
  print("\nNúmero total de productos en todos los pedidos: $totalProductos");

}